<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce opportunity and SAP Sales Order Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			<![CDATA[
I want to aggregate Opportunities from Salesforce with sales orders from SAP and compare them to see which can only be found in one of the two and which are in both instances.

For practical purposes this template generates the result in the format of a CSV Report sent by email.

This template serves as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences.

As implemented, it gets opportunities from Salesforce and sales orders from SAP, compares them by  name, and generates a CSV file which shows opportunity in Salesforce, Sales Order in SAP, and opportunities from Salesforce and matching SAP. The report is then e-mailed to a configured group of e-mail addresses.
]]>
		</section>
		<section id="considerations">
			<![CDATA[
To make this Anypoint template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for all to run smoothly.
Failing to do so could lead to unexpected behavior of the template.

## Disclaimer

This Anypoint template uses a few private Maven dependencies from MuleSoft to work. If you intend to run this template with Maven support, you need to add three extra dependencies for SAP to the pom.xml file.
]]>
		</section>
		<section id="sap_dst">
<![CDATA[
The SAP sales order name is stored in the text FORM HEADER of the SO.
]]>
		</section>
		<section id="running_on_studio">
<![CDATA[
To make this template run in Studio there are a few extra steps that needs to be made.
Search for "Enabling Your Studio Project for SAP" in https://docs.mulesoft.com.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After you get your application to run, if you chose `template-sfdc2sap-opportunity-aggregation` as the domain name to trigger the use case, browse to `http://template-sfdc2sap-opportunity-aggregation.cloudhub.io/generatereport` and the report gets sent to the email addresses you configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case, browse to the HTTP endpoint with the port you configured in your file. For example if you set the port to `9090`, browse to `http://localhost:9090/generatereport` to create the CSV report and send it to the emails set.
]]>
		</section>
		<section id="application_configuration">
			<![CDATA[
+ http.port `9090` 

### Salesforce Connector Configuration

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

### SAP Connector Configuration

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

+ sap.customer.number `0000000124`

### SMTP Services Configuration

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

### Email Details

+ mail.from `exampleuser@example.com`
+ mail.to `woody.guthrie@example.com`
+ mail.subject `SFDC Opportunities/sales orders Report`
+ mail.body `Report comparing opportunities from SFDC and sales orders from SAP`
+ attachment.name `OrderedReport.csv`
]]>
		</section>
				<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, this template only
makes one API call to Salesforce during aggregation.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you can find the endpoint to start the aggregation. This template uses an HTTP Listener as the way to trigger the use case.
$H$H# Trigger Flow
**HTTP Listener** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change this to one you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub then routes requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the template is implemented in this XML, directed by one flow responsible of conducting the aggregation of data, comparing records, and finally formatting the output, in this case the CSV report.
Using the Scatter-Gather component the templage queries the data in different systems. After that the aggregation is implemented in a DataWeave 2 script using the Transform component.

Aggregated results are sorted by:

1. Opportunities only in Salesforce.
2. Opportunities (Sales Orders) only in SAP.
3. Opportunities (Sales Orders) in both Salesforce and SAP.

These are transformed to CSV format. The final report in CSV format is sent to the email addresses, that you configured in the `mule.*.properties` file.

]]>
		</section>
	</sections>
</configuration>
