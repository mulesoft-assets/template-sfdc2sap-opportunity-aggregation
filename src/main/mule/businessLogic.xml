<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sap="http://www.mulesoft.org/schema/mule/sap" 
	xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd">

<flow name="businessLogicFlow" doc:id="20625294-79d3-45a3-90bd-9b44970bc67b" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="062ec4ac-b3c3-49f7-94b4-cea2462cf09b" >
			<route >
				<salesforce:query doc:name="query all opportunities from SalesForce instance " doc:id="d97f8d00-2a6d-40e1-b2e4-34acdb69e47a" config-ref="Salesforce_Sfdc_config">
					<salesforce:salesforce-query >SELECT Id, Probability, Name, Amount FROM Opportunity</salesforce:salesforce-query>
				</salesforce:query>
			</route>
			<route >
				<flow-ref doc:name="Call querySapSubFlow" doc:id="4238bb38-90b4-480d-bab3-bf74af69ce65" name="querySapSubFlow"/>
				
			</route>
		</scatter-gather>
		<ee:transform doc:name="Transform Collection to CSV" doc:id="7668acb0-da18-4df8-92a8-0bc58c5ad88b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/csv separator=",", header=true
import mergeWith from dw::core::Objects
var opportunitiesSFDC = payload["0"].payload map (opportunity) -> {
	"Name": opportunity.Name,
	"IDInSFDC": opportunity.Id,
	"Probability": opportunity.Probability,
	"Amount": opportunity.Amount
}
var opportunitiesSAP = payload["1"].payload map (opportunity) -> {
	"Name": opportunity.Name,
	"IDInSAP": opportunity.Id,
	"Status": opportunity.Status
}
var mergedOpportunities =  (
                opportunitiesSFDC map ((item) -> item mergeWith ((opportunitiesSAP filter ($.Name == item.Name))[0] 
                    default {IDInSAP: "", Status: ""}
                ))
            ) distinctBy $.Name
            ++ (
                opportunitiesSAP map ((item) -> item mergeWith ((opportunitiesSFDC filter ($.Name == item.Name))[0] 
                    default {IDInSFDC: "", Probability: "", Amount: ""}
                ))
            ) distinctBy $.Name
fun sortBySourceExistence (opportunities) = ((opportunities map (opportunity) -> (
        opportunity ++ {
            sortValue:  if ((opportunity.IDInSFDC != "") and (opportunity.IDInSAP == "")) 1 
                        else if ((opportunity.IDInSAP != "") and (opportunity.IDInSFDC == "")) 2 
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedOpportunities) map (opportunity) -> {
	"Name": opportunity.Name,
	"IDInSFDC": opportunity.IDInSFDC,
	"IDInSAP": opportunity.IDInSAP,
	"Probability": opportunity.Probability,
	"Amount": opportunity.Amount,
	"Status": opportunity.Status

	
 }]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email"
			doc:id="5896eaa9-dd10-47a2-a6fc-6319b11dbd06" fromAddress="${mail.from}"
			subject="${mail.subject}">
			<email:to-addresses>
				<email:to-address value="${mail.to}" />
			</email:to-addresses>
			<email:body contentType="text/plain">
				<email:content ><![CDATA[${mail.body}]]></email:content>
			</email:body>
			<email:attachments ><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>
		
</email:send>
</flow>
	<sub-flow name="querySapSubFlow" doc:id="cfac8a43-76d9-476b-b46a-cafebe48e517" >
		<ee:transform doc:name="Transform to ISA_SALESDOCUMENTS_SEARCH_NEW" doc:id="0691fcf4-6d5e-4fbc-bd3b-e5904262ccf9" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
  "ISA_SALESDOCUMENTS_SEARCH_NEW": {
    "import": {
      "CUSTOMER_NUMBER": "${sap.customer.number}"
    }
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sap:execute-synchronous-remote-function-call key="ISA_SALESDOCUMENTS_SEARCH_NEW" doc:name="Execute SA_SALESDOCUMENTS_SEARCH_NEW operation" doc:id="00629566-4cd3-40d8-a3bf-0480cc6df7ed" config-ref="SAP_Outbound">
				</sap:execute-synchronous-remote-function-call>
				<ee:transform doc:name="Transform ISA_SALESDOCUMENTS_SEARCH_NEW to BAPI_ISAORDER_GETDETAILEDLIST" doc:id="ff017cce-46a5-4107-a1cb-2b956dc79790" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
	"BAPI_ISAORDER_GETDETAILEDLIST": {
		"import": {
			"I_BAPI_VIEW": {
				"STATUS_H": "X",
				"TEXT": "X"
			}
		},
		"tables": {			
			"SALES_DOCUMENTS": {
				(payload."ISA_SALESDOCUMENTS_SEARCH_NEW".tables."STATUS_DATA".*row map {
					"row": {
						"VBELN": $.VBELN
					}
				})				
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sap:execute-synchronous-remote-function-call doc:name="query all sales from SAP" doc:id="a25d53be-2cb4-4c7d-a694-3ac6c22d1ed9" config-ref="SAP_Outbound" key="BAPI_ISAORDER_GETDETAILEDLIST">
				</sap:execute-synchronous-remote-function-call>
				<ee:transform doc:name="convert SAP response to Salesforce Opportunity" doc:id="5071ab8e-8287-446a-a3c6-d636fbaaad59" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
import mergeWith from dw::core::Objects
var statusHeaders = payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_STATUSHEADERS_OUT".*row map {
		Status: $."ISA_DOC_STATUS",
		Id: $."SD_DOC"
}
var textHeaders = payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTHEADERS_OUT".*row map {
		Id : $.SD_DOC,
		TextName : $.TEXT_NAME
}
var textLines = payload."BAPI_ISAORDER_GETDETAILEDLIST".tables."ORDER_TEXTLINES_OUT".*row map {
		Line : $.LINE,
		TextName : $.TEXT_NAME
}
var mergedHeaders = statusHeaders map ((item) -> item mergeWith ((textHeaders filter ($.Id == item.Id))[0] 
                )
            ) distinctBy $.Id
var mergedText = mergedHeaders map ((item) -> item mergeWith ((textLines filter ($.TextName == item.TextName))[0] 
                )
            ) distinctBy $.TextName
---
mergedText map {
    Name: $.Line,
    Id: $.Id,
    Status: $.Status

}]]></ee:set-payload>
					</ee:message>
				</ee:transform>	
	</sub-flow>
	<flow name="mainFlow" doc:id="c9d80d54-ed92-4dc2-872f-629f3c0b678f" >
	<flow-ref doc:name="Call businessLogicFlow" doc:id="7e1b3d52-2256-4af8-b0c5-b8fbee3d1b66" name="businessLogicFlow"/>
	<error-handler >
		<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="488b507d-e26c-4c56-8759-8bb4f6645d71" type="ANY">
			<flow-ref doc:name="errorHandlingFlow" doc:id="afdaf73c-0137-4d60-84f6-5c41234771a3" name="errorHandlingFlow"/>
		</on-error-propagate>
	</error-handler>
</flow>	
	
</mule>
